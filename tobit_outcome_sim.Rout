
R version 3.4.0 (2017-04-21) -- "You Stupid Darkness"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> 
> rm(list = ls())
> 
> library(ggplot2)
> #library(ggthemes)
> library(tidyr)
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> 
> library(estCI)
> 
> 
> set.seed(12345)
> 
> ############################################ 
> # Simulation 
> ############################################
> 
> # Parameters
> n=1000
> num.simulations.finite = 1000
> num.draws.super = 1000
> tau.vec = seq(0,4,by = 0.5)
> 
> f.finite.sample = function(tau0){
+   
+   ### Generate data
+   y0 = rnorm(n)
+   y1 = (y0+tau0)*(y0>=0) + y0*(y0<0)
+   
+   sate = mean((y1-y0))
+   rho0 = cor(y1,y0)
+   tau = y1-y0
+   
+   gain.satt.vec <- gain.sharp.vec <- gain.satt.sharp.vec <- gain.satt.rho.vec  <- rep(NA,num.simulations.finite)
+   reject.satt.vec <- reject.sharp.vec <- reject.sate.neyman.vec <- reject.wilcox.vec <- reject.ks.vec <- rep(NA,num.simulations.finite) 
+   type1.error.satt.vec <- type1.error.satc.vec <- type1.error.sate.rho.vec <- rep(NA,num.simulations.finite)
+   error.sate.in.satt.vec <- error.satt.in.sate.vec <- rep(NA,num.simulations.finite)
+   
+   for (i in 1:num.simulations.finite){
+     
+     tr = rep(0,n)
+     tr.index = sample(c(1:n),size=n/2,replace=FALSE)
+     tr[tr.index]=1
+     
+     y = tr*y1 + y0*(1-tr)
+     
+     result = aveCI(y,tr, print=FALSE, rho = rho0 )
+     
+     length.satt.ci = result$sattCI[[2]]-result$sattCI[[1]]
+     length.sharp.ci = result$sharpCI[[2]]-result$sharpCI[[1]]
+     length.neyman.ci = result$neymanCI[[2]]-result$neymanCI[[1]]
+     length.rho.ci = result$sate.rho$ci.upper.sate.rho-result$sate.rho$ci.lower.sate.rho
+     
+     satt = mean((y1-y0)[tr==1])
+     satc = mean((y1-y0)[tr==0])
+     
+     type1.error.satt.vec[i] = satt> result$sattCI[[2]] | satt< result$sattCI[[1]]
+     type1.error.satc.vec[i] = satc> result$satcCI[[2]] | satc< result$satcCI[[1]]
+     type1.error.sate.rho.vec[i] = sate > result$sate.rho$ci.upper.sate.rho | sate < result$sate.rho$ci.lower.sate.rho
+     
+     gain.satt.vec[i] = 1-length.satt.ci/length.neyman.ci
+     gain.sharp.vec[i] = 1-length.sharp.ci/length.neyman.ci
+     gain.satt.sharp.vec[i] = 1-length.satt.ci/length.sharp.ci
+     gain.satt.rho.vec[i] = 1 - length.satt.ci/length.rho.ci
+     
+     error.sate.in.satt.vec[i] = sate> result$sattCI[[2]] | sate< result$sattCI[[1]]
+     error.satt.in.sate.vec[i] = satt > result$neymanCI[[2]] | satt< result$neymanCI[[1]]
+     
+     # Rejection vectors
+     reject.satt.vec[i] <- as.numeric(result$sattCI$tstat.satt>1.96)
+     reject.sharp.vec[i] <- as.numeric(result$sharpCI$tstat.sharp>1.96)
+     reject.sate.neyman.vec[i] <-  as.numeric(result$sharpCI$tstat.sharp>1.96)
+     reject.wilcox.vec[i] <-  as.numeric(wilcox.test(y[tr==1],y[tr==0])$p.value)
+     reject.ks.vec[i] <-  as.numeric(ks.test(y[tr==1],y[tr==0])$p.value)
+     
+   }
+   
+   r = data.frame(
+     type1.error.satt.ave = mean(type1.error.satt.vec),
+     type1.error.satc.ave = mean(type1.error.satc.vec),
+     type1.error.sate.rho.ave = mean(type1.error.sate.rho.vec),
+     gain.satt.ave = mean(gain.satt.vec),
+     gain.sharp.ave = mean(gain.sharp.vec),
+     gain.satt.sharp.ave = mean(gain.satt.sharp.vec),
+     gain.satt.rho.ave = mean(gain.satt.rho.vec),
+     error.sate.in.satt.ave = mean(error.sate.in.satt.vec),
+     error.satt.in.sate.ave = mean(error.satt.in.sate.vec),
+     var.tau = var(tau),
+     #
+     reject.satt.vec = mean(reject.satt.vec),
+     reject.sharp.vec = mean(reject.sharp.vec),
+     reject.sate.neyman.vec = mean(reject.sate.neyman.vec),
+     reject.wilcox.vec = mean(reject.wilcox.vec),
+     reject.ks.vec = mean(reject.ks.vec)
+   )
+ }
> 
> # check
> print(f.finite.sample(1.5))
  type1.error.satt.ave type1.error.satc.ave type1.error.sate.rho.ave
1                0.054                0.053                    0.053
  gain.satt.ave gain.sharp.ave gain.satt.sharp.ave gain.satt.rho.ave
1     0.2706694     0.03930958           0.2407229         0.2416092
  error.sate.in.satt.ave error.satt.in.sate.ave  var.tau reject.satt.vec
1                  0.156                  0.008 0.561973               1
  reject.sharp.vec reject.sate.neyman.vec reject.wilcox.vec reject.ks.vec
1                1                      1      6.216403e-07             0
> 
> len.par.vec = length(tau.vec)
> d = data.frame(
+   gain.satt.ci = rep(NA,num.draws.super * len.par.vec),
+   gain.satt.sharp.ci =  rep(NA,num.draws.super * len.par.vec),
+   gain.sharp.ci = rep(NA,num.draws.super * len.par.vec),
+   gain.satt.rho.ci = rep(NA,num.draws.super * len.par.vec),
+   tau = rep(tau.vec,each= num.draws.super),
+   size.indicator.satt = rep(NA,num.draws.super * len.par.vec ),
+   size.indicator.sate.in.satt = rep(NA,num.draws.super * len.par.vec ),
+   size.indicator.satc = rep(NA,num.draws.super * len.par.vec ),
+   size.indicator.satt.in.sate = rep(NA,num.draws.super * len.par.vec ),
+   size.indicator.sate.rho = rep(NA,num.draws.super * len.par.vec),
+   #
+   reject.satt = rep(NA,num.draws.super * len.par.vec),
+   reject.sharp = rep(NA,num.draws.super * len.par.vec),
+   reject.sate.neyman = rep(NA,num.draws.super * len.par.vec),
+   reject.wilcox = rep(NA,num.draws.super * len.par.vec),
+   reject.ks = rep(NA,num.draws.super * len.par.vec)
+ )
> dim(d)
[1] 9000   15
> 
> ### Simulation 
> for (i in c(1:length(tau.vec))){
+   for (s in c(1:num.draws.super)){
+     if(s%%20==0){cat("Iteration: ",s,"\n")}
+     
+     result = f.finite.sample(tau.vec[i])
+     #
+     d$gain.satt.ci[(i-1)*num.draws.super + s] = result$gain.satt.ave
+     d$gain.sharp.ci[(i-1)*num.draws.super + s] = result$gain.sharp.ave
+     d$gain.satt.sharp.ci[(i-1)*num.draws.super + s] = result$gain.satt.sharp.ave
+     d$gain.satt.rho.ci[(i-1)*num.draws.super + s] = result$gain.satt.rho.ave
+     #
+     d$size.indicator.satt[(i-1)*num.draws.super + s] = result$type1.error.satt.ave
+     d$size.indicator.satc[(i-1)*num.draws.super + s] = result$type1.error.satc.ave
+     d$size.indicator.sate.in.satt[(i-1)*num.draws.super + s] = result$error.sate.in.satt.ave
+     d$size.indicator.satt.in.sate[(i-1)*num.draws.super + s] = result$error.satt.in.sate.ave
+     d$size.indicator.sate.rho[(i-1)*num.draws.super + s] = result$type1.error.sate.rho.ave
+     #
+     d$reject.satt[(i-1)*num.draws.super + s] = result$reject.satt.vec
+     d$reject.sharp[(i-1)*num.draws.super + s] = result$reject.sharp.vec
+     d$reject.sate.neyman[(i-1)*num.draws.super + s] = result$reject.sate.neyman.vec
+     d$reject.wilcox[(i-1)*num.draws.super + s] = result$reject.wilcox.vec
+     d$reject.ks[(i-1)*num.draws.super + s] = result$reject.ks.vec
+   }
+ }
Iteration:  20 
Iteration:  40 
Iteration:  60 
Iteration:  80 
Iteration:  100 
Iteration:  120 
Iteration:  140 
Iteration:  160 
Iteration:  180 
Iteration:  200 
Iteration:  220 
Iteration:  240 
Iteration:  260 
Iteration:  280 
Iteration:  300 
Iteration:  320 
Iteration:  340 
Iteration:  360 
Iteration:  380 
Iteration:  400 
Iteration:  420 
Iteration:  440 
Iteration:  460 
Iteration:  480 
Iteration:  500 
Iteration:  520 
Iteration:  540 
Iteration:  560 
Iteration:  580 
Iteration:  600 
Iteration:  620 
Iteration:  640 
Iteration:  660 
Iteration:  680 
Iteration:  700 
Iteration:  720 
Iteration:  740 
Iteration:  760 
Iteration:  780 
Iteration:  800 
Iteration:  820 
Iteration:  840 
Iteration:  860 
Iteration:  880 
Iteration:  900 
Iteration:  920 
Iteration:  940 
Iteration:  960 
Iteration:  980 
Iteration:  1000 
Iteration:  20 
Iteration:  40 
Iteration:  60 
Iteration:  80 
Iteration:  100 
Iteration:  120 
Iteration:  140 
Iteration:  160 
Iteration:  180 
Iteration:  200 
Iteration:  220 
Iteration:  240 
Iteration:  260 
Iteration:  280 
Iteration:  300 
Iteration:  320 
Iteration:  340 
Iteration:  360 
Iteration:  380 
Iteration:  400 
Iteration:  420 
Iteration:  440 
Iteration:  460 
Iteration:  480 
Iteration:  500 
Iteration:  520 
Iteration:  540 
Iteration:  560 
Iteration:  580 
Iteration:  600 
Iteration:  620 
Iteration:  640 
Iteration:  660 
Iteration:  680 
Iteration:  700 
Iteration:  720 
Iteration:  740 
Iteration:  760 
Iteration:  780 
Iteration:  800 
Iteration:  820 
Iteration:  840 
Iteration:  860 
Iteration:  880 
Iteration:  900 
Iteration:  920 
Iteration:  940 
Iteration:  960 
Iteration:  980 
Iteration:  1000 
Iteration:  20 
Iteration:  40 
Iteration:  60 
Iteration:  80 
Iteration:  100 
Iteration:  120 
Iteration:  140 
Iteration:  160 
Iteration:  180 
Iteration:  200 
Iteration:  220 
Iteration:  240 
Iteration:  260 
Iteration:  280 
Iteration:  300 
Iteration:  320 
Iteration:  340 
Iteration:  360 
Iteration:  380 
Iteration:  400 
Iteration:  420 
Iteration:  440 
Iteration:  460 
Iteration:  480 
Iteration:  500 
Iteration:  520 
Iteration:  540 
Iteration:  560 
Iteration:  580 
Iteration:  600 
Iteration:  620 
Iteration:  640 
Iteration:  660 
Iteration:  680 
Iteration:  700 
Iteration:  720 
Iteration:  740 
Iteration:  760 
Iteration:  780 
Iteration:  800 
Iteration:  820 
Iteration:  840 
Iteration:  860 
Iteration:  880 
Iteration:  900 
Iteration:  920 
Iteration:  940 
Iteration:  960 
Iteration:  980 
Iteration:  1000 
Iteration:  20 
Iteration:  40 
Iteration:  60 
Iteration:  80 
Iteration:  100 
Iteration:  120 
Iteration:  140 
Iteration:  160 
Iteration:  180 
Iteration:  200 
Iteration:  220 
Iteration:  240 
Iteration:  260 
Iteration:  280 
Iteration:  300 
Iteration:  320 
Iteration:  340 
Iteration:  360 
Iteration:  380 
Iteration:  400 
Iteration:  420 
Iteration:  440 
Iteration:  460 
Iteration:  480 
Iteration:  500 
Iteration:  520 
Iteration:  540 
Iteration:  560 
Iteration:  580 
Iteration:  600 
Iteration:  620 
Iteration:  640 
Iteration:  660 
Iteration:  680 
Iteration:  700 
Iteration:  720 
Iteration:  740 
Iteration:  760 
Iteration:  780 
Iteration:  800 
Iteration:  820 
Iteration:  840 
Iteration:  860 
Iteration:  880 
Iteration:  900 
Iteration:  920 
Iteration:  940 
Iteration:  960 
Iteration:  980 
Iteration:  1000 
Iteration:  20 
Iteration:  40 
Iteration:  60 
Iteration:  80 
Iteration:  100 
Iteration:  120 
Iteration:  140 
Iteration:  160 
Iteration:  180 
Iteration:  200 
Iteration:  220 
Iteration:  240 
Iteration:  260 
Iteration:  280 
Iteration:  300 
Iteration:  320 
Iteration:  340 
Iteration:  360 
Iteration:  380 
Iteration:  400 
Iteration:  420 
Iteration:  440 
Iteration:  460 
Iteration:  480 
Iteration:  500 
Iteration:  520 
Iteration:  540 
Iteration:  560 
Iteration:  580 
Iteration:  600 
Iteration:  620 
Iteration:  640 
Iteration:  660 
Iteration:  680 
Iteration:  700 
Iteration:  720 
Iteration:  740 
Iteration:  760 
Iteration:  780 
Iteration:  800 
Iteration:  820 
Iteration:  840 
Iteration:  860 
Iteration:  880 
Iteration:  900 
Iteration:  920 
Iteration:  940 
Iteration:  960 
Iteration:  980 
Iteration:  1000 
Iteration:  20 
Iteration:  40 
Iteration:  60 
Iteration:  80 
Iteration:  100 
Iteration:  120 
Iteration:  140 
Iteration:  160 
Iteration:  180 
Iteration:  200 
Iteration:  220 
Iteration:  240 
Iteration:  260 
Iteration:  280 
Iteration:  300 
Iteration:  320 
Iteration:  340 
Iteration:  360 
Iteration:  380 
Iteration:  400 
Iteration:  420 
Iteration:  440 
Iteration:  460 
Iteration:  480 
Iteration:  500 
Iteration:  520 
Iteration:  540 
Iteration:  560 
Iteration:  580 
Iteration:  600 
Iteration:  620 
Iteration:  640 
Iteration:  660 
Iteration:  680 
Iteration:  700 
Iteration:  720 
Iteration:  740 
Iteration:  760 
Iteration:  780 
Iteration:  800 
Iteration:  820 
Iteration:  840 
Iteration:  860 
Iteration:  880 
Iteration:  900 
Iteration:  920 
Iteration:  940 
Iteration:  960 
Iteration:  980 
Iteration:  1000 
Iteration:  20 
Iteration:  40 
Iteration:  60 
Iteration:  80 
Iteration:  100 
Iteration:  120 
Iteration:  140 
Iteration:  160 
Iteration:  180 
Iteration:  200 
Iteration:  220 
Iteration:  240 
Iteration:  260 
Iteration:  280 
Iteration:  300 
Iteration:  320 
Iteration:  340 
Iteration:  360 
Iteration:  380 
Iteration:  400 
Iteration:  420 
Iteration:  440 
Iteration:  460 
Iteration:  480 
Iteration:  500 
Iteration:  520 
Iteration:  540 
Iteration:  560 
Iteration:  580 
Iteration:  600 
Iteration:  620 
Iteration:  640 
Iteration:  660 
Iteration:  680 
Iteration:  700 
Iteration:  720 
Iteration:  740 
Iteration:  760 
Iteration:  780 
Iteration:  800 
Iteration:  820 
Iteration:  840 
Iteration:  860 
Iteration:  880 
Iteration:  900 
Iteration:  920 
Iteration:  940 
Iteration:  960 
Iteration:  980 
Iteration:  1000 
Iteration:  20 
Iteration:  40 
Iteration:  60 
Iteration:  80 
Iteration:  100 
Iteration:  120 
Iteration:  140 
Iteration:  160 
Iteration:  180 
Iteration:  200 
Iteration:  220 
Iteration:  240 
Iteration:  260 
Iteration:  280 
Iteration:  300 
Iteration:  320 
Iteration:  340 
Iteration:  360 
Iteration:  380 
Iteration:  400 
Iteration:  420 
Iteration:  440 
Iteration:  460 
Iteration:  480 
Iteration:  500 
Iteration:  520 
Iteration:  540 
Iteration:  560 
Iteration:  580 
Iteration:  600 
Iteration:  620 
Iteration:  640 
Iteration:  660 
Iteration:  680 
Iteration:  700 
Iteration:  720 
Iteration:  740 
Iteration:  760 
Iteration:  780 
Iteration:  800 
Iteration:  820 
Iteration:  840 
Iteration:  860 
Iteration:  880 
Iteration:  900 
Iteration:  920 
Iteration:  940 
Iteration:  960 
Iteration:  980 
Iteration:  1000 
Iteration:  20 
Iteration:  40 
Iteration:  60 
Iteration:  80 
Iteration:  100 
Iteration:  120 
Iteration:  140 
Iteration:  160 
Iteration:  180 
Iteration:  200 
Iteration:  220 
Iteration:  240 
Iteration:  260 
Iteration:  280 
Iteration:  300 
Iteration:  320 
Iteration:  340 
Iteration:  360 
Iteration:  380 
Iteration:  400 
Iteration:  420 
Iteration:  440 
Iteration:  460 
Iteration:  480 
Iteration:  500 
Iteration:  520 
Iteration:  540 
Iteration:  560 
Iteration:  580 
Iteration:  600 
Iteration:  620 
Iteration:  640 
Iteration:  660 
Iteration:  680 
Iteration:  700 
Iteration:  720 
Iteration:  740 
Iteration:  760 
Iteration:  780 
Iteration:  800 
Iteration:  820 
Iteration:  840 
Iteration:  860 
Iteration:  880 
Iteration:  900 
Iteration:  920 
Iteration:  940 
Iteration:  960 
Iteration:  980 
Iteration:  1000 
> 
> d$tau = factor(d$tau)
> 
> save.image(file = "tobit_gain_sim_July2017.rda")
> 
> 
> 
> 
> 
> 
> 
> 
> proc.time()
     user    system   elapsed 
79665.520    15.292 79715.282 
